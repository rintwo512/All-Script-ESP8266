/* 

By : Rinto Harahap

Modul IoT 101
NodeMCU ESP8266

Date : 16/01/2023

*/

#define BLYNK_TEMPLATE_ID "TMPLuMRUBc-S"
#define BLYNK_DEVICE_NAME "Smart Building"
#define BLYNK_AUTH_TOKEN "DQjwJrAdOo8fB4_jNe-o6zI16RyKucJ3"

#define BLYNK_PRINT Serial


#include <ESP8266WiFi.h>
#include <BlynkSimpleEsp8266.h>
#include <time.h>



char auth[] = BLYNK_AUTH_TOKEN;

const char* ALL_SSID[] = {"RH", "500 - Internal server error!", "ENGINEERING.TR 7", "404 - Not Found!", "Makassar"};
const char* ALL_PASS[] = {"makassar92", "Makassar_15", "TIDAKKUTAUKI", "Makassar_2015", "Makassar1992"};

const int SSID_TERBACA = sizeof(ALL_SSID) / sizeof(ALL_SSID[0]);
#define trigPin D1
#define echoPin D2
#define LED_Merah D6
#define Alarm_LED D7
#define LED_Start D8
#define BUZZ D0
#define RelayA D3
#define RelayB D4





BlynkTimer timer;

// WidgetLED led1(V6);
WidgetLCD lcd(V5);


void setTime(int timezone)
{
  
  Serial.print("[TIME] : Setting time using SNTP \n");

  configTime(timezone * 3600, 0, "id.pool.ntp.org");
  time_t now = time(nullptr);
  while (now < 1000)
  {
    delay(500);
    Serial.print(".");
    now = time(nullptr);
  }
  struct tm timeinfo;
  gmtime_r(&now, &timeinfo);
  Serial.printf("\n[TIME] : Current time: %s \n", asctime(&timeinfo));
}


void setup()
{

  

  boolean wifiFound = false;
  int i, n;

  // Debug console
  Serial.begin(115200);  
  WiFi.mode(WIFI_STA);
  WiFi.disconnect();
  delay(100);
  Serial.println("Penyiapan selesai");

  Serial.println(F("Pindai mulai"));
  int nbVisibleNetworks = WiFi.scanNetworks();
  Serial.println(F("Pemindaian Selesai"));
  if (nbVisibleNetworks == 0) {
  Serial.println(F("Tidak ada jaringan yang ditemukan. Setel ulang untuk mencoba lagi!"));
  while (true);
  }

  Serial.print(nbVisibleNetworks);
  Serial.println(" jaringan(s) ditemukan!");


  for (i = 0; i < nbVisibleNetworks; ++i) {
  Serial.println(WiFi.SSID(i));
  for (n = 0; n < SSID_TERBACA; n++) {
  if (strcmp(ALL_SSID[n], WiFi.SSID(i).c_str())) {
  Serial.print(F("\tTidak cocok! "));
  Serial.println(ALL_SSID[n]);
  } else {
    wifiFound = true;
    break;
    }
  }
  if (wifiFound) break;
  }

  if (!wifiFound) {
  Serial.println(F("Tidak ada Jaringan Dikenal yang teridentifikasi. Setel ulang untuk mencoba lagi !"));
  while (true);

  }

  const char* ssid = (ALL_SSID[n]);
  const char* pass = (ALL_PASS[n]);
  Serial.println(WiFi.localIP());
  Blynk.begin(auth, ssid, pass);
  Serial.println("Blynk Connected");
  
  pinMode(RelayB, OUTPUT);
  pinMode(RelayA, OUTPUT);  
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);  
  pinMode(BUZZ, OUTPUT);
  pinMode(LED_Merah, OUTPUT);
  pinMode(Alarm_LED, OUTPUT);
  pinMode(LED_Start, OUTPUT);

  Startup();  
  setTime(8);

}


BLYNK_WRITE(V0) {
    if (param.asInt() == 1)
    {        
        digitalWrite(RelayB, LOW);
    }
    else
    {        
        digitalWrite(RelayB, HIGH);
    }
}

BLYNK_WRITE(V1)
{
    if (param.asInt() == 1)
    {      
        digitalWrite(RelayA, LOW);   
    }
    else
    {
        digitalWrite(RelayA, HIGH);        
    }
}


BLYNK_WRITE(V2)
{
    if (param.asInt() == 1)
    {    
        digitalWrite(BUZZ, HIGH);
        for(int i = 0; i <= 30; i++){
          digitalWrite(Alarm_LED, HIGH);
          digitalWrite(BUZZ, HIGH);
          delay(500);
          digitalWrite(Alarm_LED, LOW);
          digitalWrite(BUZZ, LOW);
          delay(500);
        }
    }
    else
    {        
        digitalWrite(BUZZ, LOW);   
    }
}



void loop() {

  lcd.print (2, 0, "Makassar.012");
  lcd.print (1, 1, "Smart Home 1.0");
      

   time_t now = time(nullptr);
  struct tm* p_timeinfo = localtime(&now);
  Serial.printf("[NOW]  : Time = %s \n", asctime(p_timeinfo));
  
  if((p_timeinfo->tm_hour == 17) && (p_timeinfo->tm_min == 59)) {
    Blynk.virtualWrite(V0, 1);
    digitalWrite(RelayB, LOW);   
  }

  if((p_timeinfo->tm_hour == 5) && (p_timeinfo->tm_min == 59)) {
   
    Blynk.virtualWrite(V0, 0);
    digitalWrite(RelayB, HIGH);   
  }

  if((p_timeinfo->tm_hour == 18) && (p_timeinfo->tm_min == 59)) {
    Blynk.virtualWrite(V1, 1);
    digitalWrite(RelayA, LOW);     
  }

  if((p_timeinfo->tm_hour == 19) && (p_timeinfo->tm_min == 59)) {
   
    Blynk.virtualWrite(V1, 0);
    digitalWrite(RelayA, HIGH);   
  }

  delay(1000);

    
   Blynk.run();
   timer.run();
   

}




void Startup()  {

  for(int i = 0; i <= 3; i++){
    digitalWrite(LED_Start, HIGH);
    digitalWrite(BUZZ, HIGH);
    delay(500);
    digitalWrite(LED_Start, LOW);
    digitalWrite(BUZZ, LOW);
    delay(500);
  }
}








